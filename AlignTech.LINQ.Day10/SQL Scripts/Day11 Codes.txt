Create Database AlignTechDB
GO

USE AlignTechDB

Select Getdate()

Create Table Employee(
	EmployeeId int identity(10001,2),
	FirstName varchar(50) not null,
	LastName varchar(50),
	BirthDate date not null,
	Salary numeric(8,2) not null,
	--Audit Columns
	AddedDate datetime not null default getdate(),
	ModifiedDate datetime)

Create Table Department(
	Id int identity(1001, 1) constraint pk_Department_Id Primary Key,
	DepartmentName varchar(100) not null,
		--Audit Columns
	AddedDate datetime not null default getdate(),
	ModifiedDate datetime)

	go
	sp_help  Employee
	go

Alter Table Employee add constraint pk_Employee_Id Primary Key(EmployeeId)
Alter Table Employee alter Column LastName varchar(30)

--If DepartmentId column exist in Employee
Alter Table Employee add constraint fk_Employee_Department_DepartmentId Foreign Key(DepartmentId) 
									references Department(Id)
									ON Delete SET null
									ON Update Cascade

--Creating Department Id Column and adding foreign key constraint									
Alter Table Employee add DepartmentId int  -- Creating new column
									constraint fk_Employee_Department_DepartmentId Foreign Key --Add Foreign Key Constraint
									references Department(Id) -- Reference the Parent Table and Column
									ON Delete SET null
									ON Update Cascade
go
Alter Table Employee drop constraint fk_Employee_Department_DepartmentId


--DML
Select * from Department
Select * from Employee


Insert Department(DepartmentName) values('Sales')

--Date Format - yyyy-MM-dd
Insert Employee(FirstName,  BirthDate, Salary, DepartmentId)
	values('Kayal','1960-12-02',58000.55, 1001)

Update Employee SET FirstName = 'Prabhu', ModifiedDate=GETDATE() Where EmployeeId = 10001

Delete from Employee Where EmployeeId=10007

Delete from Department Where Id=1001

SET  Identity_Insert Department ON

Update Department SET Id=1001





Use QuickKartDB
go
Select * from Products
Select * from Categories
Select * from PurchaseDetails

--Select Statement
Select ProductName, Price from Products

Select * from Products Where Price > 50000

Select * from Products Where Price > 50000 order by Price 

Select * from Products Where Price > 50000 order by Price  DESC

Select * from Products Where Price > 50000 order by QuantityAvailable, Price DESC

Select ProductName, Price from Products Order by 1 desc

Update PurchaseDetails SET ProductId = null Where EmailId = 'SamRocks@gmail.com'

Select * from PurchaseDetails Where ProductId is null

Select * from PurchaseDetails Where ProductId is not null

Select * from PurchaseDetails Where DateOfPurchase between '2014-01-01' and '2014-01-31'

Select * from PurchaseDetails Where DateOfPurchase not between '2014-01-01' and '2014-01-31'

Select Top 3 * from Products order by Price DESC

---Aggerate Function
Select SUM(Price) as Total, AVG(Price) as Average, Min(Price) as 'Min', Max(Price) as 'Max', COUNT(price) as 'Count' from Products

--Group By
Select CategoryId, Count(ProductName) from Products
group by CategoryId

Select CategoryId, STRING_AGG(ProductName,', ') as Products from Products
group by CategoryId

--Select * from Products Where SUM(Price)>10000--error

Select CategoryId, SUM(Price) as Price from Products Group by CategoryId having SUM(Price)>15000

Select CategoryId, SUM(Price) as Price from Products Group by CategoryId having CategoryId IN(1,2,5)

Select * from EmpSalary

--Select Department, Category, SUM(Salary) from EmpSalary 
--group by Department, Category
--RollUp(Department)

Select * from Products

go
With PriceWithTaxCTE
as
(Select ProductId, ProductName, Price,
Case
	When Price>1000000 Then (Price * 0.25) 
	When Price > 500000 Then Price *0.18
	When Price > 50000 then price *0.05
	else 0
end as Tax
from Products)
Select * from PriceWithTaxCTE  Where Tax = 0

---JOIN (INNER Join, OUter Join(Left Outer, Right Outer, Full Outer), Cross Join, Self Join)
Select * from PurchaseDetails

Select * from Products join Categories ON Products.CategoryId = Categories.CategoryId

Select ProductId, ProductName, Products.CategoryId, CategoryName from Products join Categories ON Products.CategoryId = Categories.CategoryId

Select p.ProductId, ProductName, p.CategoryId, CategoryName, PurchaseId, DateOfPurchase from 
								Products p join Categories c ON p.CategoryId = c.CategoryId
								Join PurchaseDetails pd ON p.ProductId = pd.ProductId
								Order by 5

Select p.ProductId, ProductName, PurchaseId, DateOfPurchase from Products p LEFT JOIN PurchaseDetails pd ON p.ProductId = pd.ProductId

Select p.ProductId, ProductName, PurchaseId, DateOfPurchase from Products p RIGHT JOIN PurchaseDetails pd ON p.ProductId = pd.ProductId

Select p.ProductId, ProductName, PurchaseId, DateOfPurchase from Products p FULL JOIN PurchaseDetails pd ON p.ProductId = pd.ProductId

----Stored Procedure
go
Create Proc usp_GetAllProducts
as
Select * from Products

EXEC usp_GetAllProducts

go
sp_helptext usp_GetAllProducts

go
Alter Proc usp_GetAllProducts
with encryption
as
Select * from Products

go
alter Proc usp_ProductWithPurchaseDetails(@CategoryName varchar(100))
as
if(@CategoryName is Null OR @CategoryName='')
	Return -1
else if  not exists(Select 'a' from Categories Where CategoryName = @CategoryName)
	Return -2
else
	Select p.ProductId, ProductName, p.CategoryId, CategoryName, PurchaseId, DateOfPurchase from 
								Products p join Categories c ON p.CategoryId = c.CategoryId
								Join PurchaseDetails pd ON p.ProductId = pd.ProductId
								Where CategoryName = @CategoryName
								Order by 5
Return 1

Declare @result int
Exec @result= usp_ProductWithPurchaseDetails 'Sales'
if(@result= -1 or @result=-2)
	Print 'Invalid Category Name'


	Select * from Categories Where CategoryName = 'Motors'






